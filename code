pip install pandas scikit-learn matplotlib

import pandas as pd
import numpy as np

# Create a hypothetical dataset
np.random.seed(42)  # For reproducibility
data = {
    'SquareFootage': np.random.randint(800, 5000, 100),  # Random square footage between 800 and 5000
    'Bedrooms': np.random.randint(1, 6, 100),            # Random number of bedrooms between 1 and 5
    'Bathrooms': np.random.randint(1, 4, 100),           # Random number of bathrooms between 1 and 3
    'Price': np.random.randint(100000, 500000, 100)      # Random price between $100,000 and $500,000
}

# Convert to DataFrame
house_data = pd.DataFrame(data)

# Display the first few rows of the dataset
print(house_data.head())

from sklearn.model_selection import train_test_split

# Define features and target variable
X = house_data[['SquareFootage', 'Bedrooms', 'Bathrooms']]
y = house_data['Price']

# Split the dataset into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LinearRegression

# Create a linear regression model
model = LinearRegression()

# Train the model
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Calculate metrics
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Absolute Error: {mae}')
print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')

import matplotlib.pyplot as plt

plt.scatter(y_test, y_pred)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual vs Predicted Prices')
plt.plot([y.min(), y.max()], [y.min(), y.max()], '--', color='red')  # Line of equality
plt.show()

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Create a hypothetical dataset
np.random.seed(42)  # For reproducibility
data = {
    'SquareFootage': np.random.randint(800, 5000, 100),  # Random square footage between 800 and 5000
    'Bedrooms': np.random.randint(1, 6, 100),            # Random number of bedrooms between 1 and 5
    'Bathrooms': np.random.randint(1, 4, 100),           # Random number of bathrooms between 1 and 3
    'Price': np.random.randint(100000, 500000, 100)      # Random price between $100,000 and $500,000
}

# Convert to DataFrame
house_data = pd.DataFrame(data)

# Display the first few rows of the dataset
print(house_data.head())

# Define features and target variable
X = house_data[['SquareFootage', 'Bedrooms', 'Bathrooms']]
y = house_data['Price']

# Split the dataset into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a linear regression model
model = LinearRegression()

# Train the model
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Calculate metrics
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Absolute Error: {mae}')
print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')

# Visualize the results
plt.scatter(y_test, y_pred)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual vs Predicted Prices')
plt.plot([y.min(), y.max()], [y.min(), y.max()], '--', color='red')  # Line of equality
plt.show()
